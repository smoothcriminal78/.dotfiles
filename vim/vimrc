set nocompatible
filetype off

function! BuildYCM(info)
  if a:info.status == 'installed' || a:info.force
    !./install.py
  endif
endfunction

" Install vim-plug if we don't already have it
if empty(glob('~/.vim/autoload/plug.vim'))
silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" Generic
Plug 'scrooloose/nerdtree'            " File browser
Plug 'kien/ctrlp.vim'                 " Working with buffers
Plug 'majutsushi/tagbar'              " Class/module browser (Ctags required)
Plug 'easymotion/vim-easymotion'      " Navigation
Plug 'craigemery/vim-autotag'
Plug 'mg979/vim-visual-multi'
Plug 'tpope/vim-eunuch'

" Status line
Plug 'bling/vim-airline'              " Lean & mean status/tabline for vim
Plug 'vim-airline/vim-airline-themes' " ---dependencies
Plug 'morhetz/gruvbox'                " Colorscheme
Plug 'dstein64/vim-menu'

" Completion and text
Plug 'ycm-core/YouCompleteMe', { 'do': function('BuildYCM') }
Plug 'rdnetto/YCM-Generator'
Plug 'ervandew/supertab'
Plug 'vim-scripts/AutoComplPop'
Plug 'jiangmiao/auto-pairs'           " Insert/Delete brackets in pair
Plug 'tpope/vim-commentary'           " Comment stuff out
Plug 'tpope/vim-surround'             " Parentheses, brackets, quotes, XML tags, and more
Plug 'tpope/vim-repeat'

" Indentation
Plug 'godlygeek/tabular'
Plug 'yggdroot/indentline'

" Syntax
Plug 'scrooloose/syntastic' 
"
" CSV
Plug 'chrisbra/csv.vim'

" Git
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

" Snippets
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" HTML
Plug 'mattn/emmet-vim'

" JavaScript
Plug 'pangloss/vim-javascript'        " Vastly improved Javascript indentation and syntax support in Vim
Plug 'alvan/vim-closetag'

" Python
Plug 'klen/python-mode'               " Vim python-mode. PyLint, Rope, Pydoc, breakpoints from box
Plug 'davidhalter/jedi-vim'
Plug 'lepture/vim-jinja'

" Scala
Plug 'derekwyatt/vim-scala'

" Other
Plug 'freitass/todo.txt-vim'
Plug 'mhinz/vim-startify'

call plug#end()

" General
filetype plugin indent on
syntax on
set encoding=utf-8              " utf-8 default encoding
set clipboard=unnamed
set gcr=a:blinkon0              " don't blink
set matchtime=0                 " don't blink when matching
set noeb vb t_vb=               " disable beepsound
set backspace=indent,eol,start
set mouse=a
set pastetoggle=<F3>

set cursorcolumn
set cursorline
" set list listchars=tab:»-,trail:·,extends:»,precedes:« " Show indent during typing
" set lcs+=space:· " Show indentation spaces with dots


" Presentation
colorscheme gruvbox 
set background=dark
set laststatus=2                " always show status bar
set showmode                    " show current mode down the bottom
set number                      " line numbers
set ruler                       " show percentage within buffer

" Search
set incsearch                   " incremental search
set hlsearch                    " highlighted search results
set showmatch                   " show matching brackets/parenthesis

" Menu
aunmenu Help.
aunmenu Window.
set wildmenu                    " customize the wildmenu
set guioptions-=T               " hide toolbar

" Backup
set nobackup                    " no backup file
set nowritebackup               " no backup file while editing
set noswapfile                  " no swap file

" Wrapping
set nowrap                      " no line wraps

" Folding
set foldmethod=indent           " fold based on indent
set foldnestmax=3               " deepest fold is 3 levels
set nofoldenable                " dont fold by default

" Buffers
set switchbuf=useopen
noremap <S-q> :q!<CR>           " close current buffer
noremap <A-Right> :bn<CR>       " move to next buffer
noremap <A-Left> :bp<CR>        " move to previous buffer

" Tabs
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>

" Split navigations
nnoremap <C-j> <C-w><C-j>
nnoremap <C-k> <C-w><C-k>
nnoremap <C-l> <C-w><C-l>
nnoremap <C-h> <C-w><C-h>

" Mappings
let mapleader=","
let maplocalleader = "\\"
nnoremap <leader><space> :noh<cr>   " Clear search highlighting

inoremap <C-l> <Esc>lxa

" Changing between syntaxes
nnoremap <leader>Tp :set ft=python<CR>
nnoremap <leader>Tjs :set ft=javascript<CR>
nnoremap <leader>Tj :set ft=java<CR>
nnoremap <leader>Ts :set ft=scala<CR>
nnoremap <leader>Tsql :set ft=sql<CR>
nnoremap <leader>Th :set ft=html<CR>
nnoremap <leader>Tx :set ft=xml<CR>
nnoremap <leader>Tcs :set ft=cs<CR>
nnoremap <leader>Tcss :set ft=css<CR>
nnoremap <leader>Tcsv :set ft=csv<CR>

" Autocomplete
set completeopt=menuone,longest,noinsert
"--GUI mode
" noremap <C-space> <C-x><C-o>
"--console mode
inoremap <C-@> <C-x><C-o>
" inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"

" Encoding menu
set wcm=<Tab>
menu Encoding.koi8-r :e ++enc=koi8-r ++ff=unix<CR>
menu Encoding.windows-1251 :e ++enc=cp1251 ++ff=dos<CR>
menu Encoding.cp866 :e ++enc=cp866 ++ff=dos<CR>
menu Encoding.utf-8 :e ++enc=utf8 <CR>
menu Encoding.koi8-u :e ++enc=koi8-u ++ff=unix<CR>
map <F8> :emenu Encoding.<TAB>

" Folding menu
menu Folding.syntax :set foldmethod=syntax<CR>
menu Folding.indent :set foldmethod=indent<CR>
menu Folding.manual :set foldmethod=manual<CR>
map <F9> :emenu Folding.<TAB>

" Options based on file type
au BufNewFile,BufRead *.sh set tabstop=2 softtabstop=2 shiftwidth=2
au BufNewFile,BufRead *.cpp set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
au BufNewFile,BufRead *.c set tabstop=4 softtabstop=4 shiftwidth=4 noexpandtab
au BufNewFile,BufRead *.py set autoindent smartindent smarttab expandtab textwidth=120 tabstop=4 softtabstop=4 shiftwidth=4
au BufNewFile,BufRead *.js set tabstop=2 softtabstop=2 shiftwidth=2
au BufNewFile,BufRead *.html set syntax=html tabstop=2 softtabstop=2 shiftwidth=2
au BufNewFile,BufRead *.css set tabstop=2 softtabstop=2 shiftwidth=2

" Large files
if getfsize(@%) < 100000  
  "-- enable easymotion search for normal files
  map  / <Plug>(easymotion-sn)
  omap / <Plug>(easymotion-tn)
endif
au FileType xml,json if getfsize(@%) > 100000 | setlocal syntax=OFF | endif

"----Plugins----
" Auto pairs
" let g:AutoPairsShortcutToggle = '<another key>'

" NERDtree
let g:NERDTreeDirArrows=0
let NERDTreeShowHidden=1
let NERDTreeHighlightCursorline=1
"-- for win
"-- let g:NERDTreeDirArrowExpandable = '>'
"-- let g:NERDTreeDirArrowCollapsible = '*'
let NERDTreeIgnore=['\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$']
" autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nmap <leader>n :NERDTreeToggle<cr>

autocmd! BufEnter * call ToggleCursorLine()

function! ToggleCursorLine()
    if (bufname('#') =~ 'NERD_tree_\d\+')
        set nocursorcolumn
	" :LeadingSpaceDisable
    else
	set cursorline cursorcolumn
    endif
endfunction

" Indent
let g:indentLine_enabled = 0
let g:indentLine_char = '┊'
let g:indentLine_color_term = 239
" let g:indentLine_char_list = ['|', '¦', '┆', '┊']
let g:indentLine_leadingSpaceEnabled=0
let g:indentLine_leadingSpaceChar='.'

au BufNewFile,BufRead *.py,*.cpp,*.h,*.html,*.htm,*.js,*.css,*.java,*.json,*.sh :IndentLinesEnable
au BufNewFile,BufRead *.py,*.cpp,*.h,*.html,*.htm,*.js,*.css,*.java,*.json,*.sh :LeadingSpaceEnable

" TagBar 
let g:tagbar_autofocus = 1
" set tags=$HOME/.ctags
map <F4> :TagbarToggle<CR>
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" Vim-autotag
" let g:autotagTagsFile="$HOME/.ctags"
let g:autotagTagsFile="./tags"

" SuperTab
let g:SuperTabDefaultCompletionType = "<c-n>"
" let g:SuperTabDefaultCompletionType = "context"

" Youcompleteme
let g:ycm_server_python_interpreter='/usr/bin/python3'
" let g:ycm_server_log_level = 'debug'
" let g:ycm_server_use_vim_stdout = 1
let g:ycm_confirm_extra_conf=0
" let g:loaded_youcompleteme = 0
" let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'
let g:ycm_filetype_blacklist = { 'python' : 1, 'html' : 1 , 'xml' : 1 }
" let g:ycm_filetype_specific_completion_to_disable = { 'python': 1 }
let g:ycm_goto_buffer_command = 'same-buffer'

" Python Mode
let g:pymode_python = 'python3'
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
" disable autocomplete
let g:pymode_rope_lookup_project = 0
let g:pymode_rope_complete_on_dot = 0
let g:pymode_folding = 0

let g:pymode_lint = 0
" let g:pymode_lint_checkers = ['pylint', 'pep8', 'mccabe', 'pep257', 'pyflakes']
" let g:pymode_lint_checkers = ['pep8']
let g:pymode_lint_ignore="E501,W601"
let g:pymode_virtualenv = 1

" Jedi-vim
let g:jedi#popup_select_first = 0
let g:jedi#completions_enabled = 1
let g:jedi#use_tabs_not_buffers = 0
let g:jedi#popup_on_dot = 1
" let g:jedi#show_call_signatures = "0"
let g:jedi#goto_command = "<localleader>d"
let g:jedi#goto_assignments_command = "<localleader>g"
let g:jedi#goto_definitions_command = ""
let g:jedi#documentation_command = "K"
let g:jedi#usages_command = "<localleader>n"
let g:jedi#completions_command = "<C-Space>"
let g:jedi#rename_command = "<localleader>r"

" Jinja
" au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm set ft=jinja
au BufNewFile,BufRead *.shtml,*.stm set ft=jinja
autocmd FileType jinja setlocal commentstring=\{#%s#}

" Snippets
let g:UltiSnipsExpandTrigger="<c-f>"
let g:UltiSnipsJumpForwardTrigger="<c-f>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical" " :UltiSnipsEdit to split your window.

" Emmet
" let g:user_emmet_install_global = 0
" autocmd FileType html,css EmmetInstall
" let g:user_emmet_leader_key='<C-Y>'

" Gitgutter
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk

" Syntastic
let g:syntastic_mode_map = {
    \ "mode": "active",
    \ "passive_filetypes": ["scala"] }

" Ctrl-P
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_show_hidden = 1
let g:ctrlp_max_files = 600
let g:ctrlp_max_depth = 6
let g:ctrlp_working_path_mode = 1
nnoremap <leader>. :CtrlPTag<cr>

" Vim-Airline
" let g:airline_theme='gruvbox'
" let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail'

" Vim easy motion
map <Leader> <Plug>(easymotion-prefix)
"---to move to char
map  <Leader>f <Plug>(easymotion-bd-f)
nmap <Leader>f <Plug>(easymotion-overwin-f)
"---move to word
map  <Leader>w <Plug>(easymotion-bd-w)
nmap <Leader>w <Plug>(easymotion-overwin-w)
"---move to line
map <Leader>L <Plug>(easymotion-bd-jk)
nmap <Leader>L <Plug>(easymotion-overwin-line)

" Vim closetag
let g:closetag_filenames = '*.xml,*.html,*.xhtml'

" todo.txt
map <F2> :sp ~/todo.txt<CR>

" todo.txt
map <F10> :sp ~/help.txt<CR>

" compile C program
" map <F12> :w <CR> :!g++ % -o %< && ./%< <CR>
" map <F12> :w <CR> :!cc % -o %< && ./%< <CR>
" autocmd FileType c nnoremap <leader>r :w <CR> :!cc % -o %< -lm && ./%< <CR>
" autocmd FileType c nnoremap <leader>r :w <CR> :!cc % -o %< -lm -lcrypto -lssl && ./%< <CR>
autocmd FileType cpp,h nnoremap <leader>r :w <CR> :!cmake CMakeLists.txt && make -j8 && ./painting <CR>
autocmd FileType c,cpp,h,hpp nnoremap <buffer> <C-\> :vsplit \| YcmCompleter GoTo<CR>
autocmd FileType c,cpp,h,hpp nnoremap <buffer> <C-]> :split \| YcmCompleter GoTo<CR>

function! RunJava()
    let args = input('Args:')
    execute '!javac -classpath .:/media/azimut/work/src/sandbox/CG/JAVA/algorithms-sedgewick-wayne/libs/algs4.jar:stdlib.jar % && java -classpath .:/media/azimut/work/src/sandbox/CG/JAVA/algorithms-sedgewick-wayne/libs/algs4.jar:stdlib.jar %:r' . args
endfunction
autocmd FileType java nnoremap <leader>r :w <CR> :call RunJava() <CR> 

" startify
let g:startify_custom_header = [
      \ '          ______________              ',
      \ '         |              |             ',
      \ '         | hello smooth |             ',
      \ '         |______________|             ',
      \ '                o                     ',
      \ '                 o   ^__^             ',
      \ '                  o  (oo)\_______     ',
      \ '                     (__)\       )\   ',
      \ '                         ||----w |    ',
      \ '                         ||     ||    ',
      \]
