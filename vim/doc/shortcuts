" Nerdtree
 t: Open the selected file in a new tab
 i: Open the selected file in a horizontal split window
 s: Open the selected file in a vertical split window
 I: Toggle hidden files
 m: Show the NERD Tree menu
 R: Refresh the tree, useful if files change outside of Vim
 ?: Toggle NERD Tree's quick help
 
" CtrlP
 Press <F5> to purge the cache for the current directory to get new files, remove deleted files and apply new ignore options.
 Press <c-f> and <c-b> to cycle between modes.
 Press <c-d> to switch to filename only search instead of full path.
 Press <c-r> to switch to regexp mode.
 Use <c-j>, <c-k> or the arrow keys to navigate the result list.
 Use 	<c-t> open the selected entry in a new tab
	<c-v>, <c-x> open the selected entry in a new split.
 Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
 Use <c-y> to create a new file and its parent directories.
 Use <c-z> to mark/unmark multiple files and <c-o> to open them.
 Use :diffthis when opening multiple files to run :diffthis on the first 4 files.

" Ctags
 <leader>. - browse tags
ctags -R --languages=python
 
" Tagbar 
p - move to tag staying in tag window
 <F4>
 <C-]>
 <C-T>

" ConqueTerm
 :ConqueTerm bash
 <F5> run python interpreter
 <F6> run scala interpreter
 <F9> send a visually selected range of text to an existing terminal buffer
 <F10> send the entire contents of the file you are editing to an existing terminal buffer
 <F11> execute the current file in a new terminal buffer 

" Snipmate
<C-J> - Show all available snippets
<C-L> - expand
<C-H> - snip back

" Vim Surround
 Normal mode
 -----------
 ds{w/p/s/t} - delete a surrounding
 cs{w/p/s/t} - change a surrounding
 ys{w/p/s/t} - add a surrounding

 yS  - add a surrounding and place the surrounded text on a new line + indent it
 
 w - word
 p - paragraph
 s - sentence
 t - pair of HTML or XML tags
 
 Visual mode
 -----------
 v <visually select> S "
 
 Insert mode
 -----------
 <CTRL-g>s - in insert mode, add a surrounding
 <CTRL-g>S - in insert mode, add a new line + surrounding + indent

" Vim-commentary
 gc{motion} - comment or uncomment lines that {motion} moves over.
 gc{c} - comment or uncomment [count] lines.
 {Visual}gc - comment or uncomment the highlighted lines.
 gcgc,gcu uncomment the current and adjacent commented lines.
 :[range]Commentary Comment or uncomment [range] lines

" Syntastic
<F7>

" Python mode
K 	Показать документацию
<C-c>g 	Перейти к определению
\r 	Запустить код
[[ 	Перейти к предыдущему классу или функции
]] 	Перейти к следующему классу или функции
aC C 	Выполнить действие для класса. (vaC, daC, dC, yaC, yC, caC, cC)
iC 	То же, находясь внутри класса. (viC, diC, yiC, ciC)
aM M 	Выполнить действие для функции. (vaM, daM, dM, yaM, yM, caM, cM)
iM 	То же, находясь внутри функции. (viM, diM, yiM, ciM)

" Git
---vim diff
:diffg RE  " get from REMOTE
:diffg BA  " get from BASE
:diffg LO  " get from LOCAL
" Fugitive
:Git [any git command]
" Gitgutter
]c - jump to next hunk
[c - jump to previous hunk
nmap <Leader>hs <Plug>GitGutterStageHunk
nmap <Leader>hu <Plug>GitGutterUndoHunk

" CSV
:WhatColumn - If you would like to know, on which column the cursor is
:NrColumns - outputs the maximum number of columns available
:SearchInColumn [<nr>] /{pat}/ - search for a pattern within a specific column.  
:HiColumn - can be used to highlight column.
:[range]ArrangeColumn[!] [<Row>] - if you would like all columns to be visually arranged.
:[range]UnArrangeColumn - unarrange prev command
:DeleteColumn [colN]
:Header - splits the csv-buffer and adds a window, that holds a small fraction of the csv file.
:Header! - close header window
(:VHeader for vertical)
:Sort [colN] - can be used to sort the csv file on a certain column.
:[N]Column [a] - copy column N into register a
:[range]MoveColumn [source] [dest] - this moves the column number source to the right of column nr destination
:[range]SumCol [nr] [/format/] - sum of the column
:[range]NewRecord [count] - This will create in each line given by range [count] number of new empty records.
:NewDelimiter char - This changes the field delimiter of your file to the new delimiter "char"
:Duplicate columnlist - check for duplicate records
:ConvertData - convert to html
 Pre convert text: <html><body><table>
 Post convert text: </table></body></html>
 Converted text, use %s for column input: <tr><td>%s</td><td>%s</td><td>%s</td></tr>


<C-Right> or L or WTFPLMove [count] field forwards
<C-Left> or E or HMove [count] field backwards (but see |csv-mapping-H| for the movement of H).
<Up> or KMove [count] line s upwards within the same column
<Down> or JMove [count] lines downw ards within the same column
<Enter>                 Dynamically fold all lines away, that don't match
                        the value in the current column. See |csv-filter|

                        In |Replace-mode| and |Virtual-Replace-mode| does not
                        create a new row, but instead moves the cursor to the
                        beginning of the same column, one more line below.
<Space>                 Dynamically fold all lines away, that match the value in the current column.
<BS>                    Remove last item from the dynamic filter.

" XML
<LocalLeader><Space> Normal or Insert - Continue editing after the ending tag.
<LocalLeader>w Normal - Will clear the entire file of left over xml_jump_string garbage.
<LocalLeader>x Visual - Place a custom XML tag to suround the selected text. You
        need to have selected text in visual mode before you can use this
        mapping. 
<LocalLeader>.   or      <LocalLeader>> Insert - Place a literal '>' without parsing tag.
<LocalLeader>5   or      <LocalLeader>% Normal or Visual - Jump to the beginning or end tag.
<LocalLeader>d Normal - Deletes the surrounding tags from the cursor. >
<LocalLeader>c Visual - Wraps the current selection in comment tags and preserves
        existing comments by substituting placeholders. You need to have
        selected text in visual mode before you can use this mapping.

"Other
:set fileformat=unix
_____________________________________________________________________________________

:nmap - Display normal mode maps
:imap - Display insert mode maps
:vmap - Display visual and select mode maps
:smap - Display select mode maps
:xmap - Display visual mode maps
:cmap - Display command-line mode maps
:omap - Display operator pending mode maps

:help key-notation
:write ++enc=utf-8 russian.txt - save in utf-8


" Jedi-vim
Completion <C-Space>
Goto assignments <leader>g (typical goto function)
Goto definitions <leader>d (follow identifier as far as possible, includes imports and statements)
Show Documentation/Pydoc K (shows a popup with assignments)
Renaming <leader>r
Usages <leader>n (shows all the usages of a name)
Open module, e.g. :Pyimport os (opens the os module)

--macro
VG:normal @x - replay macro util end of buffer
Execute the macro stored in register a on lines 5 through 10.  :5,10normal @a
Execute the macro stored in register a on lines 5 through the end of the file.  :5,$normal @a
Execute the macro stored in register a on all lines.  :%normal @a
Execute the macro store in register a on all lines matching pattern.  :g/pattern/normal @a
To execute the macro on visually selected lines, press V and the j or k until the desired region is selected. 
Then type :norm! @a and observe the that following input line is shown.  :'<,'>normal @a

:v/calculate/d - remove all lines that don't match 'calculate'

---VSelect only matching lines---
:vimgrep pattern %
:cwin
---------------------------------

:scriptnames - #Check what plugins are installed
<leader> + e,v - #Open .vimrc
:so % - #Reload .vimrc
:args *.html - #Open multiple files in buffer
:bufdo %s/pattern/replace/ge | update - #Search and replace across multiple files
:1,50bw - #Wipeout multiple buffers
:1,50bd - #Delete multiple buffers

lcd %:p:h
%retab!
redraw! - redraw screen

#Collapse/Expand HTML Tags
zfat or zfit - to fold a tag
za - to toggle tag
zR - opens all folds in current document

dit - delete text between tag
di< - delete html tag

:set fileformat=unix - remove ^M at line breaks

--Vim
:verbose imap <Tab> - which plugin utilizes the key

https://andrew.stwrt.ca/posts/vim-ctags/
Add tags: ctags -R -f ./.git/tags .
